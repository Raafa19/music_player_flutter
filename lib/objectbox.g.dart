// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/song_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 2253061224305816642),
    name: 'Playlist',
    lastPropertyId: const obx_int.IdUid(2, 6943539922745505093),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4298641485128554843),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 6943539922745505093),
        name: 'name',
        type: 9,
        flags: 2080,
        indexId: const obx_int.IdUid(1, 6772927303034866207),
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(1, 5525243813212276076),
        name: 'songsList',
        targetId: const obx_int.IdUid(2, 8312977505267041880),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 8312977505267041880),
    name: 'Song',
    lastPropertyId: const obx_int.IdUid(17, 2313028901871639003),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4991855154851063089),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 3235044946811817146),
        name: 'data',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 756589210387335240),
        name: 'uri',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 1178913335312036471),
        name: 'displayName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 7051965870717689817),
        name: 'displayNameWOExt',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 1466376765053298993),
        name: 'size',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 6542489474865137973),
        name: 'album',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 444634442304464572),
        name: 'albumId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 6344507708385160927),
        name: 'artist',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 7027875744571085152),
        name: 'artistId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 729834263462345175),
        name: 'composer',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 3420897182157428647),
        name: 'dateAdded',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 90950622396313816),
        name: 'duration',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 2251387470289092216),
        name: 'title',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(15, 656235681924442016),
        name: 'track',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(16, 1184722028201713993),
        name: 'fileExtension',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(17, 2313028901871639003),
        name: 'audioQueryId',
        type: 6,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(2, 8356116923908896564),
        name: 'playlist',
        targetId: const obx_int.IdUid(1, 2253061224305816642),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(2, 8312977505267041880),
    lastIndexId: const obx_int.IdUid(1, 6772927303034866207),
    lastRelationId: const obx_int.IdUid(2, 8356116923908896564),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    Playlist: obx_int.EntityDefinition<Playlist>(
      model: _entities[0],
      toOneRelations: (Playlist object) => [],
      toManyRelations: (Playlist object) => {
        obx_int.RelInfo<Playlist>.toMany(1, object.id!): object.songsList,
      },
      getId: (Playlist object) => object.id,
      setId: (Playlist object, int id) {
        object.id = id;
      },
      objectToFB: (Playlist object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        fbb.startTable(3);
        fbb.addInt64(0, object.id ?? 0);
        fbb.addOffset(1, nameOffset);
        fbb.finish(fbb.endTable());
        return object.id ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          4,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final object = Playlist(id: idParam, name: nameParam);
        obx_int.InternalToManyAccess.setRelInfo<Playlist>(
          object.songsList,
          store,
          obx_int.RelInfo<Playlist>.toMany(1, object.id!),
        );
        return object;
      },
    ),
    Song: obx_int.EntityDefinition<Song>(
      model: _entities[1],
      toOneRelations: (Song object) => [],
      toManyRelations: (Song object) => {
        obx_int.RelInfo<Song>.toMany(2, object.id!): object.playlist,
      },
      getId: (Song object) => object.id,
      setId: (Song object, int id) {
        object.id = id;
      },
      objectToFB: (Song object, fb.Builder fbb) {
        final dataOffset = fbb.writeString(object.data);
        final uriOffset = object.uri == null
            ? null
            : fbb.writeString(object.uri!);
        final displayNameOffset = fbb.writeString(object.displayName);
        final displayNameWOExtOffset = object.displayNameWOExt == null
            ? null
            : fbb.writeString(object.displayNameWOExt!);
        final albumOffset = object.album == null
            ? null
            : fbb.writeString(object.album!);
        final artistOffset = object.artist == null
            ? null
            : fbb.writeString(object.artist!);
        final composerOffset = object.composer == null
            ? null
            : fbb.writeString(object.composer!);
        final titleOffset = fbb.writeString(object.title);
        final fileExtensionOffset = object.fileExtension == null
            ? null
            : fbb.writeString(object.fileExtension!);
        fbb.startTable(18);
        fbb.addInt64(0, object.id ?? 0);
        fbb.addOffset(1, dataOffset);
        fbb.addOffset(2, uriOffset);
        fbb.addOffset(3, displayNameOffset);
        fbb.addOffset(4, displayNameWOExtOffset);
        fbb.addInt64(5, object.size);
        fbb.addOffset(6, albumOffset);
        fbb.addInt64(7, object.albumId);
        fbb.addOffset(8, artistOffset);
        fbb.addInt64(9, object.artistId);
        fbb.addOffset(10, composerOffset);
        fbb.addInt64(11, object.dateAdded);
        fbb.addInt64(12, object.duration);
        fbb.addOffset(13, titleOffset);
        fbb.addInt64(14, object.track);
        fbb.addOffset(15, fileExtensionOffset);
        fbb.addInt64(16, object.audioQueryId);
        fbb.finish(fbb.endTable());
        return object.id ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final audioQueryIdParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          36,
        );
        final idParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          4,
        );
        final dataParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final uriParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final displayNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final displayNameWOExtParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final sizeParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          14,
          0,
        );
        final albumParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 16);
        final albumIdParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          18,
        );
        final artistParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 20);
        final artistIdParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          22,
        );
        final composerParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 24);
        final dateAddedParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          26,
        );
        final durationParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          28,
        );
        final titleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 30, '');
        final trackParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          32,
        );
        final fileExtensionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 34);
        final object = Song(
          audioQueryId: audioQueryIdParam,
          id: idParam,
          data: dataParam,
          uri: uriParam,
          displayName: displayNameParam,
          displayNameWOExt: displayNameWOExtParam,
          size: sizeParam,
          album: albumParam,
          albumId: albumIdParam,
          artist: artistParam,
          artistId: artistIdParam,
          composer: composerParam,
          dateAdded: dateAddedParam,
          duration: durationParam,
          title: titleParam,
          track: trackParam,
          fileExtension: fileExtensionParam,
        );
        obx_int.InternalToManyAccess.setRelInfo<Song>(
          object.playlist,
          store,
          obx_int.RelInfo<Song>.toMany(2, object.id!),
        );
        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Playlist] entity fields to define ObjectBox queries.
class Playlist_ {
  /// See [Playlist.id].
  static final id = obx.QueryIntegerProperty<Playlist>(
    _entities[0].properties[0],
  );

  /// See [Playlist.name].
  static final name = obx.QueryStringProperty<Playlist>(
    _entities[0].properties[1],
  );

  /// see [Playlist.songsList]
  static final songsList = obx.QueryRelationToMany<Playlist, Song>(
    _entities[0].relations[0],
  );
}

/// [Song] entity fields to define ObjectBox queries.
class Song_ {
  /// See [Song.id].
  static final id = obx.QueryIntegerProperty<Song>(_entities[1].properties[0]);

  /// See [Song.data].
  static final data = obx.QueryStringProperty<Song>(_entities[1].properties[1]);

  /// See [Song.uri].
  static final uri = obx.QueryStringProperty<Song>(_entities[1].properties[2]);

  /// See [Song.displayName].
  static final displayName = obx.QueryStringProperty<Song>(
    _entities[1].properties[3],
  );

  /// See [Song.displayNameWOExt].
  static final displayNameWOExt = obx.QueryStringProperty<Song>(
    _entities[1].properties[4],
  );

  /// See [Song.size].
  static final size = obx.QueryIntegerProperty<Song>(
    _entities[1].properties[5],
  );

  /// See [Song.album].
  static final album = obx.QueryStringProperty<Song>(
    _entities[1].properties[6],
  );

  /// See [Song.albumId].
  static final albumId = obx.QueryIntegerProperty<Song>(
    _entities[1].properties[7],
  );

  /// See [Song.artist].
  static final artist = obx.QueryStringProperty<Song>(
    _entities[1].properties[8],
  );

  /// See [Song.artistId].
  static final artistId = obx.QueryIntegerProperty<Song>(
    _entities[1].properties[9],
  );

  /// See [Song.composer].
  static final composer = obx.QueryStringProperty<Song>(
    _entities[1].properties[10],
  );

  /// See [Song.dateAdded].
  static final dateAdded = obx.QueryIntegerProperty<Song>(
    _entities[1].properties[11],
  );

  /// See [Song.duration].
  static final duration = obx.QueryIntegerProperty<Song>(
    _entities[1].properties[12],
  );

  /// See [Song.title].
  static final title = obx.QueryStringProperty<Song>(
    _entities[1].properties[13],
  );

  /// See [Song.track].
  static final track = obx.QueryIntegerProperty<Song>(
    _entities[1].properties[14],
  );

  /// See [Song.fileExtension].
  static final fileExtension = obx.QueryStringProperty<Song>(
    _entities[1].properties[15],
  );

  /// See [Song.audioQueryId].
  static final audioQueryId = obx.QueryIntegerProperty<Song>(
    _entities[1].properties[16],
  );

  /// see [Song.playlist]
  static final playlist = obx.QueryRelationToMany<Song, Playlist>(
    _entities[1].relations[0],
  );
}
